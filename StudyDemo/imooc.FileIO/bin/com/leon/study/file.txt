RandomAccessFile类：java提供的对文件内容的访问类，既可以读文件，也可以写文件。
RandomAccessFile支持随机访问文件，可以访问文件的任意位置。

(1)Java文件模型：
在硬盘上的文件是字节byte存储的，是数据的集合。
(2)打开文件：
有两种模式"rw"（读写）、"r"（只读）。
RandomAccessFile raf = new RandomAccessFile(file,"rw");
因为为随机访问文件，所以内部含有一个文件指针，打开文件时指针在开头pointer = 0;指针会随着读写操作移动。
(3)写方法：
raf.write(); //只写一个字节（后8位），同时指针指向下一个位置，准备再次写入。要输入较大的数时，要用到移位操作。
(4)读方法：
raf.read(); //从指针在的位置读一个字节。必须把指针移到头部。
(5)文件读写完成以后一定要关闭。



IO流（输入流、输出流）
字节流、字符流
1、字节流
1）InputStream、OutputStream
   InputStream抽象了应用程序读取数据的方式
   OutputStream抽象了应用程序写出数据的方式
2）EOF = End  读到-1就读到结尾
3）输入流基本方法
   int b = in.read(); 读取一个字节无符号填充到int低八位。-1是EOF
   in.read(byte[] buf); 读取数据填充到字节数组but
   in.read(byte[] buf, int start, int size); 读取数据到字节数组buf，从buf的start位置开始存放size长度的数据
4）输出流基本方法
   out.write(int b); 写出一个byte到流，b的低八位
   out.write(byte[] buf); 将buf字节数组都写入到流
   out.write(byte[] buf, int start, int sizi); 字节数组buf从start位置开始写size长度的字节到流
5）FileInputStream--->具体实现了在文件上读取数据
6)FileOutputStream 实现了向文件中写出byte数据的方法
7)DataOutputStream/DateInputStream 
   对“流”功能的扩展，可以更加方便的读取int，long，字符等类型数据
   DataOutputStream
      writeInt()/writeDouble()/writeUTF()

8)BufferedInputStream&BufferedOutputStream
这两个流类为IO提供了带缓冲区的操作，一般打开文件进行写入
或读取操作是，都会加上缓冲，这种流模式提高了IO的性能
从应用程序中吧输入放入文件，相当于将一缸水倒入另一个缸中：
FileOutputStream --> write()方法相当于一滴一滴地吧水“转移”过去
DataOutputStream-->write()方法会方便一些，相当于一瓢一瓢把水“转移”过去
Buffer额的OutputStream-->write()方法更方便，相当于一瓢一瓢先放入桶中，再从桶中倒入到另一个缸中


2.字符流
1）编码问题
2）认识文本和文本文件
Java的文本（char）是16位无符号整数，是字符的Unicode编码（双字节编码）
文件是byte byte byte的数据序列
文本文件是文本（char）序列按照某种编码方案（utf-8，utf-16be，gbk）序列化为byte的存储结果
3）字符流（Reader Writer） ---》操作的是文本文件
	字符的处理，一次处理一个字符
	字符的底层仍然是基本的字节序列
	字符流的基本实现
		InputStreamReader 完成byte流解析为char流，按照编码解析
		OutputStreamWriter 提供char流到byte流，按照编码处理
		
	FileReader/FileWriter：
	可以直接写文件名的路径。
	与InputStreamReader相比坏处：无法指定读取和写出的编码，容易出现乱码。
							  只能读取与项目编码方式相同的文件
	
	FileReader方法是不能设置文本的编码方式的，只能按照项目的默认编码方式解码。
	所以，如果文本与当前项目默认编码方式不同，两种解决方式：
	1.更改项目默认编码方式（能力有限）
	2.改用InputStreamReader方法去解码
	
	FileReader fr = new FileReader("e:\\javaio\\imooc.txt"); //输入流
	FileWriter fw = new FileWriter("e:\\javaio\\imooc2.txt");//输出流
	字符流：字符流分为输出流（Reader）和输出流（Writer）。操作的是文本文件。
	字符处理，一次处理一个字符
	字符处理底层还是基本的字节序列
	InputStreamReader：完成byte流解析为char流，按照编码解析
	FileInputStream in = new FileInputStream("e:\\javaio\\imoocutf8.txt");
	//获取字符输入流
	InputStreamReader isr = new InputStreamReader(in,"utf-8");//默认项目的编码,操作的时候，要写文件本身的编码格式
	OutputStreamWriter：提供char流到byte流，按照编码处理
	FileOutputStream out = new FileOutputStream("e:\\javaio\\imoocutf81.txt");
	//获取字符输出流
	OutputStreamWriter osw = new OutputStreamWriter(out,"utf-8");

	FileReader/FileWriter
	字符流的过滤器
	BufferedReader   --->readLine 一次读一行
	BufferedWriter/PrintWriter   --->写一行

3、对象的序列化、反序列化
   1）对象序列化，就是将Object转换成byte序列，反之叫对象的反序列化。
   2）序列化流（ObjectOutputStream）是过滤流 --> writeObject
      反序列化流（ObjectInputStream） -->readObject
      
   3) 序列化接口（Serializable）
      对象必须实现序列化接口，才能进行序列化，否则将出现异常
      这个接口，没有任何方法，只是一个标准
      
   4） transient 关键字
       修饰的元素不会进行JVM默认的序列化，但是可以自己完成这个元素的序列化；
       private void writeObject(java.io.ObjectOutputStream s)
			throws java.io.IOException 
	   private void readObject(java.io.ObjectInputStream s)
			throws java.io.IOException,ClassNotFoundException


  5）序列化中子类和父类构造函数的调用问题
	一个类实现了序列化接口，它的子类都能进行序列化。
	子类对象被创建时，会依次调用父类的构造函数。
	对子类进行反序列化操作时，如果其父类没有实现序列化接口，那么父类的构造函数会被显式调用；
	如果父类实现了序列化接口，则其父类的信息在子类进行序列化时，已被保存下来了，当子类进行反序列化操作时，
	可直接读取，父类的构造函数就不会被显式调用。





